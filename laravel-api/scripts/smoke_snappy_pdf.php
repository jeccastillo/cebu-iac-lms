<?php
// Smoke test for barryvdh/laravel-snappy (wkhtmltopdf) on Windows.
// This boots Laravel, renders a minimal HTML to PDF, and writes it to storage/app/test-snappy.pdf.

try {
    // Bootstrap Laravel
    require __DIR__ . '/../vendor/autoload.php';
    $app = require_once __DIR__ . '/../bootstrap/app.php';

    $kernel = $app->make(Illuminate\Contracts\Console\Kernel::class);
    $kernel->bootstrap();

    // Resolve the Snappy PDF wrapper from the container
    // Equivalent to PDF::loadHTML(...) but without using Facades.
    /** @var \Barryvdh\Snappy\PdfWrapper $pdf */
    $pdf = app('snappy.pdf.wrapper');

    // Minimal HTML
    $html = <<<HTML
<html>
  <head><meta charset="utf-8"><title>Snappy Smoke Test</title></head>
  <body style="font-family: Arial, sans-serif; padding: 24px;">
    <h1 style="color: #334155; margin: 0 0 12px;">Snappy PDF Smoke Test</h1>
    <p style="margin: 0 0 6px;">This PDF was generated by wkhtmltopdf via barryvdh/laravel-snappy.</p>
    <p style="margin: 0 0 6px;">Date: <strong>{date}</strong></p>
    <p style="margin: 0 0 6px; color: #16a34a;">If you can open this PDF, wkhtmltopdf is installed and configured correctly.</p>
  </body>
</html>
HTML;

    $html = str_replace('{date}', date('Y-m-d H:i:s'), $html);

    // Configure options similar to controller defaults
    $pdf->setOption('encoding', 'utf-8');
    $pdf->setOption('margin-top', '12mm');
    $pdf->setOption('margin-right', '12mm');
    $pdf->setOption('margin-bottom', '12mm');
    $pdf->setOption('margin-left', '12mm');

    // Load HTML and save to storage
    $pdf->loadHTML($html);

    $outPath = storage_path('app/test-snappy.pdf');
    // Ensure directory exists
    if (!is_dir(dirname($outPath))) {
        mkdir(dirname($outPath), 0777, true);
    }

    $pdf->save($outPath);

    clearstatcache();
    $size = file_exists($outPath) ? filesize($outPath) : 0;

    echo "SUCCESS: PDF generated at: {$outPath}\n";
    echo "SIZE: {$size} bytes\n";

    // Print resolved binaries for debug
    $config = config('snappy');
    $pdfBin = data_get($config, 'pdf.binary');
    $imgBin = data_get($config, 'image.binary');
    echo "USING BINARIES:\n";
    echo "  PDF: {$pdfBin}\n";
    echo "  IMG: {$imgBin}\n";

    exit(0);
} catch (Throwable $e) {
    // Print helpful diagnostics
    echo "ERROR: " . $e->getMessage() . "\n";
    echo $e->getTraceAsString() . "\n";
    exit(1);
}
